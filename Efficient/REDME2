python predict.py \
  --ckpt "./runs/effnetv2_s_384/best.ckpt" \
  --model efficientnetv2_s \
  --img-size 384 \
  --input "/path/to/test_images"

python - <<'PY'
import torch, torchvision, torchaudio
print("torch:", torch.__version__)
print("torchvision:", torchvision.__version__)
print("torchaudio:", torchaudio.__version__)
print("cuda_available:", torch.cuda.is_available())
if torch.cuda.is_available():
    print("device:", torch.cuda.get_device_name(0))
PY


python predict.py \
  --ckpt "runs/tf_effnetv2_s_in21k_ft1k_384/best.ckpt" \
  --model tf_efficientnetv2_s_in21k_ft_in1k \
  --img-size 384 \
  --input "./test_images" \
  --resize-mode pad --bg black \
  --tta \
  --threshold 0.60 \
  --topk 3 \
  --save-csv "runs/preds.csv" \
  --save-per-class "runs/preds_split"

python predict.py \
  --ckpt "runs/effv2_s_phaseB/best.ckpt" \
  --model tf_efficientnetv2_s_in21k_ft_in1k \
  --img-size 384 \
  --input "test_crops" \
  --resize-mode pad --bg black \
  --tta \
  --threshold 0.60 \
  --topk 3 \
  --save-csv "runs/preds.csv" \
  --save-per-class "runs/preds_split" \
  --eval --eval-out "runs/eval_from_predict" \
  --export-miscls --miscls-limit 50

